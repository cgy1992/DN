package slave;

option cc_generic_services = true;

message RunCommandRequest {
  required string command = 1;
  required uint32 edge_id = 2;

  // Path for outputs.
  repeated string output_paths = 3;

  // Response file, if needed.
  optional string rspfile_name = 4;
  optional string rspfile_content = 5;
};

message RunCommandResponse {
  enum ExitStatus {
    kExitSuccess = 0;
    kExitFailure = 1;
    kExitInterrupted = 2;
  };

  required ExitStatus status = 1;

  // Output stream.
  required string output = 2;
  required uint32 edge_id = 3;

  // The md5 list of the files in |output_paths|.
  repeated string md5 = 4;
};

message QuitRequest {
  required string reason = 1;
};

message QuitResponse {
};

message SystemInfoRequest {
};

message SystemInfoResponse {
  // The number of logical processors/cores on the current machine.
  required int32 number_of_processors = 1;

  // The number of bytes of physical memory on the current machine.
  required int64 amount_of_physical_memory = 2;

  // The number of bytes of virtual memory of this process. A value of zero
  // means that there is no limit on the available virtual memory.
  required int64 amount_of_virtual_memory = 3;

  // The name of the host operating system.
  required string operating_system_name = 4;

  // The version of the host operating system.
  required string operating_system_version = 5;

  // The architecture of the running operating system.
  // Exact value may differ across platforms.
  // e.g. a 32-bit x86 kernel on a 64-bit capable CPU will return "x86",
  //      whereas a x86-64 kernel on the same CPU will return "x86_64"
  required string operating_system_architecture = 6;
};

message StatusRequest {
};

message StatusResponse {
  // The load average of the machine. A negative value indicates error.
  required double load_average = 1;

  // The amount of running commands.
  required int32 amount_of_running_commands = 2;

  required int64 amount_of_available_physical_memory = 3;
};

service SlaveService {
  // Returns the system information, see SystemInfoResponse.
  rpc SystemInfo(SystemInfoRequest) returns (SystemInfoResponse);

  rpc RunCommand(RunCommandRequest) returns (RunCommandResponse);

  // Returns operating system status, including cpu load average and amount of
  // running commands.
  rpc GetStatus(StatusRequest) returns (StatusResponse);

  // Quit slave.
  rpc Quit(QuitRequest) returns (QuitResponse);
};
